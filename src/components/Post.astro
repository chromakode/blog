---
import type { CollectionEntry } from 'astro:content'
import { Image, getImage } from 'astro:assets'
import { getPostImage, postURL } from '../content/posts'
import PostDate from './PostDate.astro'

export interface Props {
  post: CollectionEntry<'blog'>
  isListingPage?: boolean
}

const { post, isListingPage } = Astro.props
const {
  slug,
  data: { pubDate, title, imageAlt, contentTitle, contentImage },
} = post

// A null value is used to unset the image (usually a video or other custom hero)
const postImg = contentImage !== null && (await getPostImage(post))

const { Content } = await post.render()
---

<article>
  <span class="breadcrumbs">
    {!isListingPage && <a href="/">chromakode</a>}
     /
    <a href={postURL(slug)}>{slug}</a>
  </span>
  {pubDate && <PostDate date={pubDate} />}
  <div class="post">
    {contentTitle !== null && <h1>{contentTitle ?? title}</h1>}
    {
      postImg && (
        <img
          {...postImg.attributes}
          src={postImg.src}
          transition:name={isListingPage ? undefined : slug}
          alt={imageAlt ?? ''}
        />
      )
    }
    <Content />
  </div>
</article>

<style lang="less">
  .breadcrumbs {
    margin-right: 0.25em;
  }

  .breadcrumbs > a {
    font-weight: bold;
  }

  article > :global(time) {
    white-space: nowrap;
    margin-left: 0.5em;
  }

  article {
    line-height: 1.5em;
    &:not(:last-child) {
      margin-bottom: 4em;
    }
  }

  article > .post {
    :global(a:not(:hover)) {
      text-decoration-color: rgba(var(--link-color), 0.25);
    }

    :global(a:visited:not(:hover)) {
      text-decoration-color: rgba(var(--link-visited-color), 0.25);
    }

    :global(img),
    :global(video) {
      width: 100%;
      height: auto;
    }

    :global(img.tall) {
      display: block;
      margin: 0 auto;
      width: auto;
      max-height: 25em;
      max-width: 100%;
    }

    :global(img.flip-y) {
      transform: scaleY(-1);
    }

    :global(.center) {
      text-align: center;

      :global(img),
      :global(video) {
        width: auto;
        max-width: 100%;
      }
    }

    :global(.w-75) {
      :global(img),
      :global(video) {
        width: 75%;
      }
    }

    :global(.bg-black img, .bg-black video) {
      background: black;
    }

    :global(.outline-2 img, .outline-2 video) {
      outline: 2px solid black;
    }

    :global(.outline-1 img, .outline-1 video) {
      outline: 1px solid black;
    }

    :global(.grid) {
      display: grid;
      margin: 1.5em 0;

      :global(p) {
        margin: 0;
      }
    }

    :global(.grid-2) {
      grid-template-columns: 1fr 1fr;
    }

    :global(.grid-4) {
      grid-template-columns: 1fr 1fr 1fr 1fr;
    }

    :global(.grid-collapse-col) {
      @media (max-width: 720px) {
        grid-template-columns: 1fr;
      }
    }

    :global(.wide) {
      @media (min-width: 920px) {
        width: 130%;
        margin-left: -15%;
      }
    }

    :global(.audio-header) {
      text-align: center;
      border-top: 1px dashed gray;
      border-bottom: 1px dashed gray;
    }

    :global(time) {
      margin-left: 1em;
      font-size: 0.9em;
    }

    :global(h1),
    :global(h2),
    :global(h3) {
      font-family: 'Lato', sans-serif;
      line-height: 1.25em;
    }

    :global(h1) {
      margin-top: 0.75rem;
    }

    :global(h2) {
      margin-top: 1.5em;
      margin-bottom: 0.5em;
      font-size: 1.25em;
      color: #222;
    }

    :global(h3) {
      margin-top: 1.5em;
      margin-bottom: 0.5em;
      font-size: 1.1em;
      color: #222;
    }

    :global(p > code),
    :global(li > code) {
      font-size: 1.1em;
      font-weight: normal;
      padding: 0.1em 0.33em;
      background: #f4f4f4;
      border-radius: 3px;
      white-space: nowrap;
    }

    :global(pre) {
      overflow: auto;
      padding: 0.66em;
      background-color: #f4f4f4 !important;
    }

    :global(hr) {
      border: none;
      border-bottom: 1px dashed gray;
    }

    :global(ol),
    :global(ul) {
      padding-inline-start: 1.35em;
    }

    :global(aside) {
      padding: 0.66em 0.33em;
      border: 1px dashed gray;
      border-left: none;
      border-right: none;
    }

    :global(details) {
      margin: 1em 0;
    }
  }
</style>
